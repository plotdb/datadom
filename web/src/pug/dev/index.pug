extends /base.pug
block prehead
  base(href="../")
block body
  .row.w-1200.rwd.mx-auto.my-4
    .col-md
      .text-center load from fected json
      hr
      #root.w-100.mx-auto.my-2.bg-light.p-4.border.shadow
    .col-md
      .text-center deserialize from serialized dom
      hr
      #rootalt.w-100.mx-auto.my-2.bg-light.p-4.border.shadow
block script
  +script("/assets/lib/proxise/main/proxise.js")
  +script("/assets/lib/@plotdb/csscope/main/csscope.js")
  +script("/assets/lib/@plotdb/rescope/main/rescope.js")
  +script("/assets/lib/@plotdb/block/main/block.js")
  script: :lsc

    load-sample = ({name}) ->
      manager.get {name, version: "0.0.1"}
        .then -> it.create!
        .then -> it.attach {root: document.getElementById(\container)}
        .catch -> console.log "failed to load block #name", it

    plugin = do
      id: "@plotdb/block@0.0.1"
      test: -> true
      serialize: (o) ->
        o.data <<< {name: o.node.block.name, version: o.node.block.version}
        # in our test case, child should always load from block class.
        o.data.child = []

      deserialize: (o) ->
        return Promise.resolve!
          .then -> manager.get {name: o.data.name, version: "0.0.1"}
          .then (ret) -> debounce 2000 .then -> ret
          .then -> it.create!
          .then ->
            o.node.block = it
            it.attach root: o.node
          .then -> o.node

    manager = new block.manager registry: ({name, version}) -> "/block/#name/#version/index.html"
    manager.init!
      .then -> ld$.fetch '/assets/data/data.json', {method: \GET}, {type: \json}
      .then (data) ->
        dd = new datadom {data, plugin}
        dd.init!
          .then ({node, promise}) ->
            root.appendChild node
            promise
          .then ->
            console.log 'deserialized. now try serializing again ... '
          .then ->
            datadom.serialize root.childNodes.0, [plugin], window
          .then ({data, promise}) -> 
            promise.then -> return data
          .then (data) ->
            console.log "serialized data: ", data
            console.log "serialized. deserialize again ..."
            datadom.deserialize(data, [plugin], window)
          .then ({node, promise}) ->
            rootalt.appendChild node
            promise
          .then -> console.log "deserialized."

            
      .catch -> console.log it
